name: Build & Release

on:
  push:
    branches: [ master, main ]
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  build-lib:
    name: Build libagent (${{ matrix.platform }}-${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: x64
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            platform: linux
            arch: arm64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos
            arch: arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
            arch: x64
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ matrix.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.target }}-cargo-

      - name: Build release
        run: cargo +nightly build --target ${{ matrix.target }} --release

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            cp target/${{ matrix.target }}/release/libagent.dll artifacts/ 2>/dev/null || true
          elif [[ "${{ matrix.target }}" == *"darwin"* ]]; then
            cp target/${{ matrix.target }}/release/liblibagent.dylib artifacts/ 2>/dev/null || true
          else
            cp target/${{ matrix.target }}/release/liblibagent.so artifacts/ 2>/dev/null || true
          fi
          cp include/libagent.h artifacts/

      - name: Upload lib artifact
        uses: actions/upload-artifact@v4
        with:
          name: lib-${{ matrix.platform }}-${{ matrix.arch }}
          path: artifacts/
          if-no-files-found: error

  build-agent:
    name: Build agentless-agent (${{ matrix.platform }}-${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            binary: agentless-agent
          - os: ubuntu-24.04-arm
            platform: linux
            arch: arm64
            binary: agentless-agent
          - os: macos-latest
            platform: macos
            arch: arm64
            binary: agentless-agent
          - os: windows-latest
            platform: windows
            arch: x64
            binary: agentless-agent.exe
    steps:
      - uses: actions/checkout@v4

      - name: Checkout datadog-agent (agentless branch)
        uses: actions/checkout@v4
        with:
          repository: DataDog/datadog-agent
          ref: tony/agentless-agent
          path: datadog-agent

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.7

      - name: Print Go environment
        working-directory: datadog-agent
        run: go env

      - name: Install UPX (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq upx-ucl

      - name: Install UPX (Windows)
        if: matrix.platform == 'windows'
        run: choco install upx -y

      - name: Build agentless binary (macOS)
        if: matrix.platform == 'macos'
        working-directory: datadog-agent
        env:
          CGO_ENABLED: "1"
        run: |
          mkdir -p bin
          GOOS=darwin GOARCH=arm64 go build -buildvcs=false -tags "grpcnotrace serverless zlib zstd" \
            -ldflags "-s -w -X github.com/DataDog/datadog-agent/pkg/version.AgentVersion=7.60.0" \
            -o bin/agentless-agent ./cmd/agentless

      - name: Build agentless binary (Windows)
        if: matrix.platform == 'windows'
        working-directory: datadog-agent
        env:
          CGO_ENABLED: "1"
        shell: bash
        run: |
          mkdir -p bin
          go build -buildvcs=false -tags "grpcnotrace serverless zlib zstd" \
            -ldflags "-s -w -X github.com/DataDog/datadog-agent/pkg/version.AgentVersion=7.60.0" \
            -o bin/agentless-agent.exe ./cmd/agentless
          upx --best --lzma bin/agentless-agent.exe

      - name: Build agentless binary (Linux)
        if: matrix.platform == 'linux'
        working-directory: datadog-agent
        env:
          CGO_ENABLED: "1"
        run: |
          mkdir -p bin
          go build -buildvcs=false -tags "grpcnotrace serverless zlib zstd" \
            -ldflags "-s -w -X github.com/DataDog/datadog-agent/pkg/version.AgentVersion=7.60.0" \
            -o bin/agentless-agent ./cmd/agentless
          upx --best --lzma bin/agentless-agent

      - name: Upload agent artifact
        uses: actions/upload-artifact@v4
        with:
          name: agent-${{ matrix.platform }}-${{ matrix.arch }}
          path: datadog-agent/bin/${{ matrix.binary }}
          if-no-files-found: error

  package:
    name: Assemble bundles
    runs-on: ubuntu-latest
    needs:
      - build-lib
      - build-agent
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            arch: x64
          - platform: linux
            arch: arm64
          - platform: macos
            arch: arm64
          - platform: windows
            arch: x64
    steps:
      - name: Download library artifact
        uses: actions/download-artifact@v4
        with:
          name: lib-${{ matrix.platform }}-${{ matrix.arch }}
          path: bundle/lib

      - name: Download agent artifact
        uses: actions/download-artifact@v4
        with:
          name: agent-${{ matrix.platform }}-${{ matrix.arch }}
          path: bundle/agent

      - name: Merge
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist libagent-${{ matrix.platform }}-${{ matrix.arch }}
          cp bundle/lib/* libagent-${{ matrix.platform }}-${{ matrix.arch }}/
          cp bundle/agent/* libagent-${{ matrix.platform }}-${{ matrix.arch }}/
          tar -czf dist/libagent-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz \
            libagent-${{ matrix.platform }}-${{ matrix.arch }}

      - name: Upload merged artifact
        uses: actions/upload-artifact@v4
        with:
          name: libagent-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/libagent-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz
          if-no-files-found: error

  release:
    name: Create Release
    needs: package
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'release'

    steps:
      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          pattern: libagent-*
          path: release-artifacts
          merge-multiple: false
      - name: Publish release assets
        uses: softprops/action-gh-release@v2
        with:
          files: release-artifacts/libagent-*.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
